
Panel4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b1e  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ef  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d3  00000000  00000000  000016f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  00001cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042c  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000032c  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  78:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setSER>:
	}
	return 0x00;
}
void setBrightness(int in)
{
	OCR1A = in;
  80:	5e 9a       	sbi	0x0b, 6	; 11
  82:	08 95       	ret

00000084 <clrSER>:
  84:	5e 98       	cbi	0x0b, 6	; 11
  86:	08 95       	ret

00000088 <setOE>:
  88:	5b 9a       	sbi	0x0b, 3	; 11
  8a:	08 95       	ret

0000008c <clrOE>:
  8c:	5b 98       	cbi	0x0b, 3	; 11
  8e:	08 95       	ret

00000090 <setRCLK>:
  90:	5c 9a       	sbi	0x0b, 4	; 11
  92:	08 95       	ret

00000094 <clrRCLK>:
  94:	5c 98       	cbi	0x0b, 4	; 11
  96:	08 95       	ret

00000098 <setSRCLK>:
  98:	5d 9a       	sbi	0x0b, 5	; 11
  9a:	08 95       	ret

0000009c <clrSRCLK>:
  9c:	5d 98       	cbi	0x0b, 5	; 11
  9e:	08 95       	ret

000000a0 <setCLK>:
  a0:	59 9a       	sbi	0x0b, 1	; 11
  a2:	08 95       	ret

000000a4 <clrCLK>:
  a4:	59 98       	cbi	0x0b, 1	; 11
  a6:	08 95       	ret

000000a8 <setLD>:
  a8:	58 9a       	sbi	0x0b, 0	; 11
  aa:	08 95       	ret

000000ac <clrLD>:
  ac:	58 98       	cbi	0x0b, 0	; 11
  ae:	08 95       	ret

000000b0 <getQ>:
  b0:	89 b1       	in	r24, 0x09	; 9
  b2:	82 fb       	bst	r24, 2
  b4:	88 27       	eor	r24, r24
  b6:	80 f9       	bld	r24, 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret

000000bc <setValue>:
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	08 2f       	mov	r16, r24
  ca:	0e 94 4a 00 	call	0x94	; 0x94 <clrRCLK>
  ce:	0e 94 4e 00 	call	0x9c	; 0x9c <clrSRCLK>
  d2:	0e 94 44 00 	call	0x88	; 0x88 <setOE>
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	d0 e0       	ldi	r29, 0x00	; 0
  da:	ee 24       	eor	r14, r14
  dc:	e3 94       	inc	r14
  de:	f1 2c       	mov	r15, r1
  e0:	10 e0       	ldi	r17, 0x00	; 0
  e2:	97 01       	movw	r18, r14
  e4:	0c 2e       	mov	r0, r28
  e6:	02 c0       	rjmp	.+4      	; 0xec <setValue+0x30>
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <setValue+0x2c>
  f0:	a8 01       	movw	r20, r16
  f2:	42 23       	and	r20, r18
  f4:	53 23       	and	r21, r19
  f6:	24 17       	cp	r18, r20
  f8:	35 07       	cpc	r19, r21
  fa:	19 f4       	brne	.+6      	; 0x102 <setValue+0x46>
  fc:	0e 94 40 00 	call	0x80	; 0x80 <setSER>
 100:	02 c0       	rjmp	.+4      	; 0x106 <setValue+0x4a>
 102:	0e 94 42 00 	call	0x84	; 0x84 <clrSER>
 106:	0e 94 4c 00 	call	0x98	; 0x98 <setSRCLK>
 10a:	0e 94 4a 00 	call	0x94	; 0x94 <clrRCLK>
 10e:	0e 94 4e 00 	call	0x9c	; 0x9c <clrSRCLK>
 112:	0e 94 48 00 	call	0x90	; 0x90 <setRCLK>
 116:	21 96       	adiw	r28, 0x01	; 1
 118:	c8 30       	cpi	r28, 0x08	; 8
 11a:	d1 05       	cpc	r29, r1
 11c:	11 f7       	brne	.-60     	; 0xe2 <setValue+0x26>
 11e:	0e 94 46 00 	call	0x8c	; 0x8c <clrOE>
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	ff 90       	pop	r15
 12c:	ef 90       	pop	r14
 12e:	08 95       	ret

00000130 <Enable>:
 130:	80 ff       	sbrs	r24, 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <Enable+0x8>
 134:	41 9a       	sbi	0x08, 1	; 8
 136:	01 c0       	rjmp	.+2      	; 0x13a <Enable+0xa>
 138:	41 98       	cbi	0x08, 1	; 8
 13a:	81 ff       	sbrs	r24, 1
 13c:	02 c0       	rjmp	.+4      	; 0x142 <Enable+0x12>
 13e:	42 9a       	sbi	0x08, 2	; 8
 140:	01 c0       	rjmp	.+2      	; 0x144 <Enable+0x14>
 142:	42 98       	cbi	0x08, 2	; 8
 144:	82 ff       	sbrs	r24, 2
 146:	02 c0       	rjmp	.+4      	; 0x14c <Enable+0x1c>
 148:	43 9a       	sbi	0x08, 3	; 8
 14a:	08 95       	ret
 14c:	43 98       	cbi	0x08, 3	; 8
 14e:	08 95       	ret

00000150 <getValue>:
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	0e 94 52 00 	call	0xa4	; 0xa4 <clrCLK>
 15c:	0e 94 54 00 	call	0xa8	; 0xa8 <setLD>
 160:	0e 94 56 00 	call	0xac	; 0xac <clrLD>
 164:	0e 94 50 00 	call	0xa0	; 0xa0 <setCLK>
 168:	0e 94 58 00 	call	0xb0	; 0xb0 <getQ>
 16c:	8c 01       	movw	r16, r24
 16e:	0e 94 52 00 	call	0xa4	; 0xa4 <clrCLK>
 172:	0e 94 54 00 	call	0xa8	; 0xa8 <setLD>
 176:	c1 e0       	ldi	r28, 0x01	; 1
 178:	d0 e0       	ldi	r29, 0x00	; 0
 17a:	0e 94 50 00 	call	0xa0	; 0xa0 <setCLK>
 17e:	0e 94 58 00 	call	0xb0	; 0xb0 <getQ>
 182:	0c 2e       	mov	r0, r28
 184:	02 c0       	rjmp	.+4      	; 0x18a <getValue+0x3a>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	0a 94       	dec	r0
 18c:	e2 f7       	brpl	.-8      	; 0x186 <getValue+0x36>
 18e:	08 2b       	or	r16, r24
 190:	19 2b       	or	r17, r25
 192:	0e 94 52 00 	call	0xa4	; 0xa4 <clrCLK>
 196:	21 96       	adiw	r28, 0x01	; 1
 198:	c0 31       	cpi	r28, 0x10	; 16
 19a:	d1 05       	cpc	r29, r1
 19c:	71 f7       	brne	.-36     	; 0x17a <getValue+0x2a>
 19e:	c8 01       	movw	r24, r16
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <init>:
 1aa:	8a b1       	in	r24, 0x0a	; 10
 1ac:	83 60       	ori	r24, 0x03	; 3
 1ae:	8a b9       	out	0x0a, r24	; 10
 1b0:	8a b1       	in	r24, 0x0a	; 10
 1b2:	88 67       	ori	r24, 0x78	; 120
 1b4:	8a b9       	out	0x0a, r24	; 10
 1b6:	87 b1       	in	r24, 0x07	; 7
 1b8:	8e 60       	ori	r24, 0x0E	; 14
 1ba:	87 b9       	out	0x07, r24	; 7
 1bc:	21 9a       	sbi	0x04, 1	; 4
 1be:	ec e7       	ldi	r30, 0x7C	; 124
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	10 82       	st	Z, r1
 1c4:	aa e7       	ldi	r26, 0x7A	; 122
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	80 e8       	ldi	r24, 0x80	; 128
 1ca:	8c 93       	st	X, r24
 1cc:	8c 91       	ld	r24, X
 1ce:	87 60       	ori	r24, 0x07	; 7
 1d0:	8c 93       	st	X, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	80 64       	ori	r24, 0x40	; 64
 1d6:	80 83       	st	Z, r24
 1d8:	81 ec       	ldi	r24, 0xC1	; 193
 1da:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 1de:	89 e0       	ldi	r24, 0x09	; 9
 1e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1e4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1e8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ec:	08 95       	ret

000001ee <main>:
}
int main(void)
{
	init();
 1ee:	0e 94 d5 00 	call	0x1aa	; 0x1aa <init>
	int s = 30;
	setValue(0xff);
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	0e 94 5e 00 	call	0xbc	; 0xbc <setValue>
	//PORTB = 2;
	Enable(0);
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 98 00 	call	0x130	; 0x130 <Enable>
	OCR1A = in;
}
int main(void)
{
	init();
	int s = 30;
 1fe:	8e e1       	ldi	r24, 0x1E	; 30
 200:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0x00;
}
void setBrightness(int in)
{
	OCR1A = in;
 202:	0f 2e       	mov	r0, r31
 204:	f8 e8       	ldi	r31, 0x88	; 136
 206:	ef 2e       	mov	r14, r31
 208:	f1 2c       	mov	r15, r1
 20a:	f0 2d       	mov	r31, r0
		{
			
			Enable(i);
			_delay_ms(1);
		}
		if(s == 50) s =30;
 20c:	0f 2e       	mov	r0, r31
 20e:	fe e1       	ldi	r31, 0x1E	; 30
 210:	df 2e       	mov	r13, r31
 212:	f0 2d       	mov	r31, r0
 214:	d0 e0       	ldi	r29, 0x00	; 0
	//PORTB = 2;
	Enable(0);
	//setBrightness(35);
	while (1)
	{
		setBrightness(s++);
 216:	8c 01       	movw	r16, r24
 218:	0f 5f       	subi	r16, 0xFF	; 255
 21a:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	return 0x00;
}
void setBrightness(int in)
{
	OCR1A = in;
 21c:	f7 01       	movw	r30, r14
 21e:	91 83       	std	Z+1, r25	; 0x01
 220:	80 83       	st	Z, r24
	Enable(0);
	//setBrightness(35);
	while (1)
	{
		setBrightness(s++);
		setValue(getValue());
 222:	0e 94 a8 00 	call	0x150	; 0x150 <getValue>
 226:	0e 94 5e 00 	call	0xbc	; 0xbc <setValue>
 22a:	c0 e0       	ldi	r28, 0x00	; 0
		for(int i = 0; i <= 8; i++)
		{
			
			Enable(i);
 22c:	8c 2f       	mov	r24, r28
 22e:	0e 94 98 00 	call	0x130	; 0x130 <Enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	8f ec       	ldi	r24, 0xCF	; 207
 234:	97 e0       	ldi	r25, 0x07	; 7
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <main+0x48>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x4e>
 23c:	00 00       	nop
 23e:	cf 5f       	subi	r28, 0xFF	; 255
	//setBrightness(35);
	while (1)
	{
		setBrightness(s++);
		setValue(getValue());
		for(int i = 0; i <= 8; i++)
 240:	c9 30       	cpi	r28, 0x09	; 9
 242:	a1 f7       	brne	.-24     	; 0x22c <main+0x3e>
		{
			
			Enable(i);
			_delay_ms(1);
		}
		if(s == 50) s =30;
 244:	02 33       	cpi	r16, 0x32	; 50
 246:	11 05       	cpc	r17, r1
 248:	11 f4       	brne	.+4      	; 0x24e <main+0x60>
 24a:	0d 2d       	mov	r16, r13
 24c:	1d 2f       	mov	r17, r29
 24e:	ef ec       	ldi	r30, 0xCF	; 207
 250:	f7 e0       	ldi	r31, 0x07	; 7
 252:	31 97       	sbiw	r30, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <main+0x64>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x6a>
 258:	00 00       	nop
 25a:	c8 01       	movw	r24, r16
 25c:	dc cf       	rjmp	.-72     	; 0x216 <main+0x28>

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
