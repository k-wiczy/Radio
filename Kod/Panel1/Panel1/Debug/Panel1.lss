
Panel1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a4e  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074c  00000000  00000000  00000d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004fb  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  000019dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000414  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000260  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000021b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  78:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setSER>:
		break;
		case 4:
		setValue((1 << 12) | (1 << 11) | (1 << 10) | (1 << 9));
		break;
		case 5:
		setValue((1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8));
  80:	5f 9a       	sbi	0x0b, 7	; 11
  82:	08 95       	ret

00000084 <clrSER>:
  84:	5f 98       	cbi	0x0b, 7	; 11
  86:	08 95       	ret

00000088 <setOE>:
  88:	5c 9a       	sbi	0x0b, 4	; 11
  8a:	08 95       	ret

0000008c <clrOE>:
  8c:	5c 98       	cbi	0x0b, 4	; 11
  8e:	08 95       	ret

00000090 <setRCLK>:
  90:	5d 9a       	sbi	0x0b, 5	; 11
  92:	08 95       	ret

00000094 <clrRCLK>:
  94:	5d 98       	cbi	0x0b, 5	; 11
  96:	08 95       	ret

00000098 <setSRCLK>:
  98:	5e 9a       	sbi	0x0b, 6	; 11
  9a:	08 95       	ret

0000009c <clrSRCLK>:
  9c:	5e 98       	cbi	0x0b, 6	; 11
  9e:	08 95       	ret

000000a0 <setCLK>:
  a0:	5a 9a       	sbi	0x0b, 2	; 11
  a2:	08 95       	ret

000000a4 <clrCLK>:
  a4:	5a 98       	cbi	0x0b, 2	; 11
  a6:	08 95       	ret

000000a8 <setLD>:
  a8:	59 9a       	sbi	0x0b, 1	; 11
  aa:	08 95       	ret

000000ac <clrLD>:
  ac:	59 98       	cbi	0x0b, 1	; 11
  ae:	08 95       	ret

000000b0 <getQ>:
  b0:	89 b1       	in	r24, 0x09	; 9
  b2:	83 fb       	bst	r24, 3
  b4:	88 27       	eor	r24, r24
  b6:	80 f9       	bld	r24, 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret

000000bc <getValue>:
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	0e 94 52 00 	call	0xa4	; 0xa4 <clrCLK>
  c8:	0e 94 54 00 	call	0xa8	; 0xa8 <setLD>
  cc:	0e 94 56 00 	call	0xac	; 0xac <clrLD>
  d0:	0e 94 50 00 	call	0xa0	; 0xa0 <setCLK>
  d4:	0e 94 58 00 	call	0xb0	; 0xb0 <getQ>
  d8:	8c 01       	movw	r16, r24
  da:	0e 94 52 00 	call	0xa4	; 0xa4 <clrCLK>
  de:	0e 94 54 00 	call	0xa8	; 0xa8 <setLD>
  e2:	c1 e0       	ldi	r28, 0x01	; 1
  e4:	d0 e0       	ldi	r29, 0x00	; 0
  e6:	0e 94 50 00 	call	0xa0	; 0xa0 <setCLK>
  ea:	0e 94 58 00 	call	0xb0	; 0xb0 <getQ>
  ee:	0c 2e       	mov	r0, r28
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <getValue+0x3a>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <getValue+0x36>
  fa:	08 2b       	or	r16, r24
  fc:	19 2b       	or	r17, r25
  fe:	0e 94 52 00 	call	0xa4	; 0xa4 <clrCLK>
 102:	21 96       	adiw	r28, 0x01	; 1
 104:	c0 31       	cpi	r28, 0x10	; 16
 106:	d1 05       	cpc	r29, r1
 108:	71 f7       	brne	.-36     	; 0xe6 <getValue+0x2a>
 10a:	c8 01       	movw	r24, r16
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <setValue>:
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	7c 01       	movw	r14, r24
 124:	0e 94 4a 00 	call	0x94	; 0x94 <clrRCLK>
 128:	0e 94 4e 00 	call	0x9c	; 0x9c <clrSRCLK>
 12c:	0e 94 44 00 	call	0x88	; 0x88 <setOE>
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	d0 e0       	ldi	r29, 0x00	; 0
 134:	01 e0       	ldi	r16, 0x01	; 1
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	c8 01       	movw	r24, r16
 13a:	0c 2e       	mov	r0, r28
 13c:	02 c0       	rjmp	.+4      	; 0x142 <setValue+0x2c>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <setValue+0x28>
 146:	9c 01       	movw	r18, r24
 148:	2e 21       	and	r18, r14
 14a:	3f 21       	and	r19, r15
 14c:	82 17       	cp	r24, r18
 14e:	93 07       	cpc	r25, r19
 150:	19 f0       	breq	.+6      	; 0x158 <setValue+0x42>
 152:	0e 94 40 00 	call	0x80	; 0x80 <setSER>
 156:	02 c0       	rjmp	.+4      	; 0x15c <setValue+0x46>
 158:	0e 94 42 00 	call	0x84	; 0x84 <clrSER>
 15c:	0e 94 4c 00 	call	0x98	; 0x98 <setSRCLK>
 160:	0e 94 4a 00 	call	0x94	; 0x94 <clrRCLK>
 164:	0e 94 4e 00 	call	0x9c	; 0x9c <clrSRCLK>
 168:	0e 94 48 00 	call	0x90	; 0x90 <setRCLK>
 16c:	21 96       	adiw	r28, 0x01	; 1
 16e:	c0 31       	cpi	r28, 0x10	; 16
 170:	d1 05       	cpc	r29, r1
 172:	11 f7       	brne	.-60     	; 0x138 <setValue+0x22>
 174:	0e 94 46 00 	call	0x8c	; 0x8c <clrOE>
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	08 95       	ret

00000186 <main>:
		break;
	}
}
int main(void)
{
   PISO_DIR |= (1 << PISO_LD) | (1 << PISO_CLK);
 186:	8a b1       	in	r24, 0x0a	; 10
 188:	86 60       	ori	r24, 0x06	; 6
 18a:	8a b9       	out	0x0a, r24	; 10
   SIPO_DIR |= (1 << SER) | (1 << OE) | (1 << RCLK) | (1 << SRCLK);
 18c:	8a b1       	in	r24, 0x0a	; 10
 18e:	80 6f       	ori	r24, 0xF0	; 240
 190:	8a b9       	out	0x0a, r24	; 10
  // DDRC = 0xFF;
   DDRB = 4;
 192:	84 e0       	ldi	r24, 0x04	; 4
 194:	84 b9       	out	0x04, r24	; 4
   //PORTB = 0xFF;
  // PORTC = 0;
   ADMUX = 0;
 196:	ec e7       	ldi	r30, 0x7C	; 124
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	10 82       	st	Z, r1
   ADCSRA = 0x80;
 19c:	aa e7       	ldi	r26, 0x7A	; 122
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	80 e8       	ldi	r24, 0x80	; 128
 1a2:	8c 93       	st	X, r24
   ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 1a4:	8c 91       	ld	r24, X
 1a6:	87 60       	ori	r24, 0x07	; 7
 1a8:	8c 93       	st	X, r24
  ADMUX |= (1 << REFS0) | (1 << REFS0) | (1 << MUX1) | (1 << MUX0);
 1aa:	80 81       	ld	r24, Z
 1ac:	83 64       	ori	r24, 0x43	; 67
 1ae:	80 83       	st	Z, r24
    TCCR1A = (1 << COM1B1) | (1 << COM1B0) | (1 << WGM10);
 1b0:	81 e3       	ldi	r24, 0x31	; 49
 1b2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1 << CS10);
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    OCR1B = 231;
 1bc:	87 ee       	ldi	r24, 0xE7	; 231
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1c4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	while (1) 
    {
		setValue(getValue());
 1c8:	0e 94 5e 00 	call	0xbc	; 0xbc <getValue>
 1cc:	0e 94 8b 00 	call	0x116	; 0x116 <setValue>
 1d0:	fb cf       	rjmp	.-10     	; 0x1c8 <main+0x42>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
