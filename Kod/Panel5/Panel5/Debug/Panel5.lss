
Panel5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000930  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d0  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046d  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  000017c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b5  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000167  00000000  00000000  00001cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  78:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setSER>:
#define PWM 1


void setSER()
{
	SIPO |= (1 << SER);
  80:	5f 9a       	sbi	0x0b, 7	; 11
  82:	08 95       	ret

00000084 <clrSER>:
}
void clrSER()
{
	SIPO &= ~(1 << SER);
  84:	5f 98       	cbi	0x0b, 7	; 11
  86:	08 95       	ret

00000088 <setOE>:
}
void setOE()
{
	SIPO |= (1 << OE);
  88:	5c 9a       	sbi	0x0b, 4	; 11
  8a:	08 95       	ret

0000008c <clrOE>:
}
void clrOE()
{
	SIPO &= ~(1 << OE);
  8c:	5c 98       	cbi	0x0b, 4	; 11
  8e:	08 95       	ret

00000090 <setRCLK>:
}
void setRCLK()
{
	SIPO |= (1 << RCLK);
  90:	5d 9a       	sbi	0x0b, 5	; 11
  92:	08 95       	ret

00000094 <clrRCLK>:
}
void clrRCLK()
{
	SIPO &= ~(1 << RCLK);
  94:	5d 98       	cbi	0x0b, 5	; 11
  96:	08 95       	ret

00000098 <setSRCLK>:
}
void setSRCLK()
{
	SIPO |= (1 << SRCLK);
  98:	5e 9a       	sbi	0x0b, 6	; 11
  9a:	08 95       	ret

0000009c <clrSRCLK>:
}
void clrSRCLK()
{
	SIPO &= ~(1 << SRCLK);
  9c:	5e 98       	cbi	0x0b, 6	; 11
  9e:	08 95       	ret

000000a0 <setCLK>:
}
void setCLK()
{
	PISO |= (1 << CLK);
  a0:	5a 9a       	sbi	0x0b, 2	; 11
  a2:	08 95       	ret

000000a4 <clrCLK>:
}
void clrCLK()
{
	PISO &= ~(1 << CLK);
  a4:	5a 98       	cbi	0x0b, 2	; 11
  a6:	08 95       	ret

000000a8 <setLD>:
}
void setLD()
{
	PISO |= (1 << LD);
  a8:	59 9a       	sbi	0x0b, 1	; 11
  aa:	08 95       	ret

000000ac <clrLD>:
}
void clrLD()
{
	PISO &= ~(1 << LD);
  ac:	59 98       	cbi	0x0b, 1	; 11
  ae:	08 95       	ret

000000b0 <getQ>:
}
int getQ()
{
	if((PIND & (1 << Q)) == (1 << Q)) return 1;
  b0:	89 b1       	in	r24, 0x09	; 9
	else return 0;
}
  b2:	83 fb       	bst	r24, 3
  b4:	88 27       	eor	r24, r24
  b6:	80 f9       	bld	r24, 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret

000000bc <setValue>:
void setValue(unsigned char val)
{
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	08 2f       	mov	r16, r24
	clrRCLK();
  ca:	0e 94 4a 00 	call	0x94	; 0x94 <clrRCLK>
	clrSRCLK();
  ce:	0e 94 4e 00 	call	0x9c	; 0x9c <clrSRCLK>
	setOE();
  d2:	0e 94 44 00 	call	0x88	; 0x88 <setOE>
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char i;

	for(i = 0; i < 8; i++)
	{
		if((val & (1 << i)) == (1 << i))
  da:	ee 24       	eor	r14, r14
  dc:	e3 94       	inc	r14
  de:	f1 2c       	mov	r15, r1
  e0:	10 e0       	ldi	r17, 0x00	; 0
  e2:	97 01       	movw	r18, r14
  e4:	0c 2e       	mov	r0, r28
  e6:	02 c0       	rjmp	.+4      	; 0xec <setValue+0x30>
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <setValue+0x2c>
  f0:	a8 01       	movw	r20, r16
  f2:	42 23       	and	r20, r18
  f4:	53 23       	and	r21, r19
  f6:	24 17       	cp	r18, r20
  f8:	35 07       	cpc	r19, r21
  fa:	19 f4       	brne	.+6      	; 0x102 <setValue+0x46>
		{
			setSER();
  fc:	0e 94 40 00 	call	0x80	; 0x80 <setSER>
 100:	02 c0       	rjmp	.+4      	; 0x106 <setValue+0x4a>
		}
		else
		{
			clrSER();
 102:	0e 94 42 00 	call	0x84	; 0x84 <clrSER>
		}
		//_delay_us(100);
		setSRCLK();
 106:	0e 94 4c 00 	call	0x98	; 0x98 <setSRCLK>
		clrRCLK();
 10a:	0e 94 4a 00 	call	0x94	; 0x94 <clrRCLK>
		//_delay_us(100);
		clrSRCLK();
 10e:	0e 94 4e 00 	call	0x9c	; 0x9c <clrSRCLK>
		setRCLK();
 112:	0e 94 48 00 	call	0x90	; 0x90 <setRCLK>
 116:	21 96       	adiw	r28, 0x01	; 1
	clrRCLK();
	clrSRCLK();
	setOE();
	unsigned char i;

	for(i = 0; i < 8; i++)
 118:	c8 30       	cpi	r28, 0x08	; 8
 11a:	d1 05       	cpc	r29, r1
 11c:	11 f7       	brne	.-60     	; 0xe2 <setValue+0x26>
		clrRCLK();
		//_delay_us(100);
		clrSRCLK();
		setRCLK();
	}
	clrOE();
 11e:	0e 94 46 00 	call	0x8c	; 0x8c <clrOE>
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	ff 90       	pop	r15
 12c:	ef 90       	pop	r14
 12e:	08 95       	ret

00000130 <Enable>:
void Enable(unsigned char val)
{
	if((val & 1) == 1)
 130:	80 ff       	sbrs	r24, 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <Enable+0x8>
	{
		DMPX |= (1 << DMPX0);
 134:	40 9a       	sbi	0x08, 0	; 8
 136:	01 c0       	rjmp	.+2      	; 0x13a <Enable+0xa>
	}
	else
	{
		DMPX &= ~(1 << DMPX0);
 138:	40 98       	cbi	0x08, 0	; 8
	}
	
	if((val & 2) == 2)
 13a:	81 ff       	sbrs	r24, 1
 13c:	02 c0       	rjmp	.+4      	; 0x142 <Enable+0x12>
	{
		DMPX |= (1 << DMPX1);
 13e:	41 9a       	sbi	0x08, 1	; 8
 140:	01 c0       	rjmp	.+2      	; 0x144 <Enable+0x14>
	}
	else
	{
		DMPX &= ~(1 << DMPX1);
 142:	41 98       	cbi	0x08, 1	; 8
	}
	
	if((val & 4) == 4)
 144:	82 ff       	sbrs	r24, 2
 146:	02 c0       	rjmp	.+4      	; 0x14c <Enable+0x1c>
	{
		DMPX |= (1 << DMPX2);
 148:	42 9a       	sbi	0x08, 2	; 8
 14a:	01 c0       	rjmp	.+2      	; 0x14e <Enable+0x1e>
	}
	else
	{
		DMPX &= ~(1 << DMPX2);
 14c:	42 98       	cbi	0x08, 2	; 8
	}
	
	if((val & 8) == 8)
 14e:	83 ff       	sbrs	r24, 3
 150:	02 c0       	rjmp	.+4      	; 0x156 <Enable+0x26>
	{
		DMPX |= (1 << DMPX3);
 152:	43 9a       	sbi	0x08, 3	; 8
 154:	08 95       	ret
	}
	else
	{
		DMPX &= ~(1 << DMPX3);
 156:	43 98       	cbi	0x08, 3	; 8
 158:	08 95       	ret

0000015a <getValue>:
	}
}
int getValue()
{
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
	int val = 0;
	clrCLK();
 162:	0e 94 52 00 	call	0xa4	; 0xa4 <clrCLK>
	setLD();
 166:	0e 94 54 00 	call	0xa8	; 0xa8 <setLD>
	
	clrLD();
 16a:	0e 94 56 00 	call	0xac	; 0xac <clrLD>
	setCLK();
 16e:	0e 94 50 00 	call	0xa0	; 0xa0 <setCLK>
	val |= getQ();
 172:	0e 94 58 00 	call	0xb0	; 0xb0 <getQ>
 176:	8c 01       	movw	r16, r24
	clrCLK();
 178:	0e 94 52 00 	call	0xa4	; 0xa4 <clrCLK>
	setLD();
 17c:	0e 94 54 00 	call	0xa8	; 0xa8 <setLD>
	for(int i = 1; i <= 15; i++)
 180:	c1 e0       	ldi	r28, 0x01	; 1
 182:	d0 e0       	ldi	r29, 0x00	; 0
	{
		setCLK();
 184:	0e 94 50 00 	call	0xa0	; 0xa0 <setCLK>
		val |= (getQ() << i);
 188:	0e 94 58 00 	call	0xb0	; 0xb0 <getQ>
 18c:	0c 2e       	mov	r0, r28
 18e:	02 c0       	rjmp	.+4      	; 0x194 <getValue+0x3a>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	0a 94       	dec	r0
 196:	e2 f7       	brpl	.-8      	; 0x190 <getValue+0x36>
 198:	08 2b       	or	r16, r24
 19a:	19 2b       	or	r17, r25
		clrCLK();
 19c:	0e 94 52 00 	call	0xa4	; 0xa4 <clrCLK>
	clrLD();
	setCLK();
	val |= getQ();
	clrCLK();
	setLD();
	for(int i = 1; i <= 15; i++)
 1a0:	21 96       	adiw	r28, 0x01	; 1
 1a2:	c0 31       	cpi	r28, 0x10	; 16
 1a4:	d1 05       	cpc	r29, r1
 1a6:	71 f7       	brne	.-36     	; 0x184 <getValue+0x2a>
		val |= (getQ() << i);
		clrCLK();
	}
	return val;
	
}
 1a8:	c8 01       	movw	r24, r16
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <init>:
void init()
{
	PISO_DIR |= (1 << LD) | (1 << CLK);
 1b4:	8a b1       	in	r24, 0x0a	; 10
 1b6:	86 60       	ori	r24, 0x06	; 6
 1b8:	8a b9       	out	0x0a, r24	; 10
	SIPO_DIR |= (1 << SER) | (1 << OE) | (1 << RCLK) | (1 << SRCLK);
 1ba:	8a b1       	in	r24, 0x0a	; 10
 1bc:	80 6f       	ori	r24, 0xF0	; 240
 1be:	8a b9       	out	0x0a, r24	; 10
	DMPX_DIR |= (1 << DMPX0) | (1 << DMPX1) | (1 << DMPX2) | (1 << DMPX3);
 1c0:	87 b1       	in	r24, 0x07	; 7
 1c2:	8f 60       	ori	r24, 0x0F	; 15
 1c4:	87 b9       	out	0x07, r24	; 7
	PWM_DIR |= (1 << PWM);
 1c6:	21 9a       	sbi	0x04, 1	; 4
 1c8:	08 95       	ret

000001ca <main>:
}

int main(void)
{
	init();
 1ca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <init>
	
	PORTB = 0;
 1ce:	15 b8       	out	0x05, r1	; 5
	Enable(0);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 98 00 	call	0x130	; 0x130 <Enable>
    while (1) 
    {
		
		setValue(getValue()&0xff);
 1d6:	0e 94 ad 00 	call	0x15a	; 0x15a <getValue>
 1da:	0e 94 5e 00 	call	0xbc	; 0xbc <setValue>
 1de:	fb cf       	rjmp	.-10     	; 0x1d6 <main+0xc>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
